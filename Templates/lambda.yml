Description: CSYE 6225 Assignment-09
Parameters:
  Test:
    Type: String
    Default: test
    Description: Test parameter
 
Resources:
  # Create Lambda Function Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  # Create a Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: UserEmailTrackingDynamoDBTable
    Properties:
      Description: !Sub '${AWS::StackName}-LambdaFunction'
      FunctionName: !Sub '${AWS::StackName}-LambdaFunction'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Timeout: 300
      MemorySize: 128
      Architectures:
        - x86_64
      PackageType: Zip
      Environment:
        Variables:
          EmailTrackingDynamoDBTable: !Ref UserEmailTrackingDynamoDBTable
          EmailTrackingDynamoDBRegion: !Ref AWS::Region
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const checkIfEmailSentAlready = async (
            dynamoDbClient,
            emailTrackingDynamoDBTable,
            userEmail
          ) => {
            const params = {
              TableName: emailTrackingDynamoDBTable,
              Key: {
                email: userEmail,
              },
            };
            const data = await dynamoDbClient.get(params).promise();
            console.log("Data:", data);
            if (data.Item) {
              return true;
            } else {
              return false;
            }
          };

          const logEmailSentToDynamoDB = async (
            dynamoDbClient,
            emailTrackingDynamoDBTable,
            userEmail
          ) => {
            const params = {
              TableName: emailTrackingDynamoDBTable,
              Item: {
                email: userEmail,
              },
            };
            const data = await dynamoDbClient.put(params).promise();
            console.log("Data:", data);
          };

          exports.handler = async (event, context, callback) => {
            console.log("Received event:", JSON.stringify(event, null, 4));
            const emailTrackingDynamoDBTable = process.env.EmailTrackingDynamoDBTable;
            const emailTrackingDynamoDBRegion = process.env.EmailTrackingDynamoDBRegion;

            // Set the region
            AWS.config.update({ region: emailTrackingDynamoDBRegion });

            const dynamoDbClient = new AWS.DynamoDB.DocumentClient({
              region: emailTrackingDynamoDBRegion,
            });

            const message = event.Records[0].Sns.Message;
            console.log("Message received from SNS:", message);

            const parsedMessage = JSON.parse(message);
            console.log("Parsed message:", parsedMessage);
            const messageType = parsedMessage.message_type;
            console.log("Message type:", messageType);
            const userToken = parsedMessage.userToken;
            console.log("User token:", userToken);
            const userEmail = parsedMessage.username;
            console.log("Username:", userEmail);
            const first_name = parsedMessage.first_name;
            console.log("First name:", first_name);
            const last_name = parsedMessage.last_name;
            console.log("Last name:", last_name);

            const emailAlreadySent = await checkIfEmailSentAlready(
              dynamoDbClient,
              emailTrackingDynamoDBTable,
              userEmail
            );

            if (!emailAlreadySent) {
              // Send email using AWS SES
              console.log("Email is not already sent to the user: " + userEmail + ". Trying to send");
              const ses = new AWS.SES();
              const params = {
                Destination: {
                  ToAddresses: [userEmail],
                },
                Message: {
                  Body: {
                    Html: {
                      Charset: "UTF-8",
                      Data: `<p>Hello ${first_name} ${last_name},</p>
                      <p>To verify your email address with demo.soumyanayar.me, Please click the following link: <a href="http://demo.soumyanayar.me/v1/verifyUserEmail?email=${userEmail}&token=${userToken}">Verify Email</a> or paste the following link in the browser: http://demo.soumyanayar.me/v1/verifyUserEmail?email=${userEmail}&token=${userToken}</p>`,
                    },
                  },
                  Subject: {
                    Charset: "UTF-8",
                    Data: "Verify you user account for demo.soumyanayar.me",
                  },
                },
                Source: "userverification@demo.soumyanayar.me",
              };

              const data = await ses.sendEmail(params).promise();
              console.log(data);
              console.log("Email sent successfully");

              await logEmailSentToDynamoDB(
                dynamoDbClient,
                emailTrackingDynamoDBTable,
                userEmail
              );
              console.log("Email logged to DynamoDB");
            } else {
              console.log(
                "Email already sent to user: " + userEmail + " No need to send again"
              );
            }
            callback(null, "success");
          };

  # Create DynamoDB Table
  UserTokenDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-UserTokenTable'
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: tokenttl
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20
  
  UserEmailTrackingDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-UserEmailTrackingTable'
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

  # Create SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-SNSTopic'
      DisplayName: !Sub '${AWS::StackName}-SNSTopic'

  # Create SNS Topic Policy
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
            Resource: !Ref SNSTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
      Topics:
        - !Ref SNSTopic
      
  SNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-LambdaFunction"
      Protocol: "lambda"
      Region: !Ref AWS::Region
  
  # Create Lambda Function Permission for SNS Topic
  SNSTopicLambdaPermission:
    DependsOn: LambdaFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub '${AWS::StackName}-LambdaFunction'
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SNSTopic